MMMM
#include "Animals.h"

int main()
{
	setlocale(LC_ALL, "RUS");

	vector<Animals*> a;//массив животных
	int N, Width, Height, R, W, x, y, d, k, i, j, l;

	cout << "Введите размер поля и кол-во ходов тремя цифрами через пробел" << endl;
	cin >> Width >> Height >> N; // размеры поля и ходы
	cout << "Введите количество кроликов и волков через пробел (Первое чилсло - кролики)" << endl;
	cin >> R >> W;//количество жертв и хищников

	vector <vector<int>> Vec(Width, vector<int>(Height));//вектор, показывающий сколько животных на поле

	Victim* v;
	Predator* p;

	for (k = 0; k < Width; k++)//заполняем нулями поле (ноль животных на каждой клетке)
		for (j = 0; j < Height; j++)
			Vec[k][j] = 0;

	for (i = 0; i < R; i++)//вводим жертв
	{
		cout << "Введите начальные координаты кролика (Два числа через пробел (max на 1 меньше последней координаты))" << endl;
		cin >> x >> y;
		cout << "Введите направление (От 0 до 3)" << endl;
		cin >> d;
		cout << "Введите количество ходов, через которые зверь меняет направление" << endl;
		cin >> k;
		v = new Victim(x, y, d, k, false);
		a.push_back(v);
	}

	for (i = 0; i < W; i++)//вводим хищников
	{
		cout << "Введите начальные координаты волка (Два числа через пробел (max на 1 меньше последней координаты))" << endl;
		cin >> x >> y;
		cout << "Введите направление (От 0 до 3)" << endl;
		cin >> d;
		cout << "Введите количество ходов, через которые зверь меняет направление" << endl;
		cin >> k;
		p = new Predator(x, y, d, k, false);
		a.push_back(p);
	}

	for (l = 0; l < a.size(); l++)//заполняем поле животными
	{
		if (l < R)
		{
			Vec[a[l]->gety()][a[l]->getx()]++;
		}
		else
		{
			Vec[a[l]->gety()][a[l]->getx()]--;
		}
	}

	cout << endl;

	for (auto element : Vec)//выводим поле
	{
		for (auto item : element)
			if (item == 0)
				cout << '*' << ' ';
			else
				cout << item << ' ';
		cout << endl;
	}
	cout << endl;

	for (i = 0; i < N; i++)//цикл, отвечающий за обработку ходов
	{
		for (k = 0; k < Width; k++)//заполняем нулями поле (ноль животных на каждой клетке)
			for (j = 0; j < Height; j++)
				Vec[k][j] = 0;
		for (j = 0; j < a.size(); j++)//перебираем всех животных
		{
			if ((a[j]->getdead()) || (a[j]->getbirth()))//если животное мертво, оно не обрабатывается
				continue;
			a[j]->move(Width, Height, i);//двигаем животных
			if (j >= R)//если хищник
			{
				for (k = 0; k < R; k++)//перебираем жертв
				{
					if ((a[j]->getx() == a[k]->getx()) && (a[j]->gety() == a[k]->gety()))//если координаты жертвы и хищника совпадают совпадают
					{
						a[j]->eat();//насыщение хищника
						a[k]->eat();//жертву съедают
					}
				}
			}
			a[j]->addyear();//старение животных
			//размножение
			if (a[j]->reproduction())
			{
				if (j < R)
				{
					vector<Animals*>::iterator it = a.begin();
					advance(it, R);
					a.insert(it, new Victim(a[j]->getx(), a[j]->gety(), a[j]->getd(), a[j]->getk(), true));
					R++;
				}
				else
				{
					a.insert(a.end(), new Predator(a[j]->getx(), a[j]->gety(), a[j]->getd(), a[j]->getk(), true));
					W++;
				}
			}
			a[j]->death();//животные, достигшие максимального возраста, умирают
		}

		for (l = 0; l < a.size(); l++)//заполняем поле животными
		{
			if (a[l]->getbirth())
				a[l]->setbirth(false);
			if ((l < R) && (a[l]->getdead() == false))
			{
				Vec[a[l]->gety()][a[l]->getx()]++;
			}
			else if (a[l]->getdead() == false)
			{
				Vec[a[l]->gety()][a[l]->getx()]--;
			}
		}

		cout << endl;

		for (auto element : Vec)//выводим поле
		{
			for (auto item : element)
				if (item == 0)
					cout << '*' << ' ';
				else
					cout << item << ' ';
			cout << endl;
		}
		cout << endl;
	}

	return 0;
}












Animals.h
#pragma once
#include <iostream>
#include <vector>
#include <iterator>


using namespace std;

enum DIRECTION
{
	UP = 0,
	RIGHT = 1,
	DOWN = 2,
	LEFT = 3
};

class Animals
{
public:
	//виртуальные методы для переопределения в наследниках
	virtual void move(const int& Width, const int& Height, const int& Turn) {};
	virtual void eat() {};
	virtual void addyear() { age++; };
	virtual bool reproduction() { return 0; };
	virtual void death() {};
	//get
	virtual int getx() { return x; };
	virtual int gety() { return y; };
	virtual int getd() { return d; };
	virtual int getk() { return k; };
	virtual int getdead() { return dead; };
	virtual int getbirth() { return birth; };
	virtual void setbirth(bool birth_i) { birth = birth_i; };
protected:
	int x, y, d, k, age = 0;
	bool dead = false, birth;
};

class Predator : public Animals
{
public:
	Predator(int x_i, int y_i, int d_i, int k_i, bool birth_i);
	void move(const int& Width, const int& Height, const int& Turn) override;
	void eat() override;
	bool reproduction() override;
	void death() override;
protected:
	int sytost;//насыщаемость
};

class Victim : public Animals
{
public:
	Victim(int x_i, int y_i, int d_i, int k_i, bool birth_i);
	void move(const int& Width, const int& Height, const int& Turn) override;
	void eat() override;
	bool reproduction() override;
	void death() override;
};















Animals.cpp
#include "Animals.h"

const int Predator_max_age = 15, Victim_max_age = 10;//максимальный возраст хищника и жертвы

Predator::Predator(int x_i, int y_i, int d_i, int k_i, bool birth_i)//конструктор хищника
{
	x = x_i;
	y = y_i;
	d = d_i;
	k = k_i;
	age = 0;
	sytost = 0;
	dead = false;
	birth = birth_i;
}

void Predator::move(const int& Width, const int& Height, const int& Turn)//движение хищника
{
	if ((Turn % k == 0) && (Turn != 0))//если значение k наступило
		d++;//меняем направление
	if (d == 4)//направление в промежутке от 0 до 3
		d = 0;
	switch (d)//движение в зависимости о направления
	{
	case UP://вверх
		y -= 2;
		if (y < 0)//если вышли за границы поля
			y += Width;
		break;
	case RIGHT:// вправо
		x += 2;
		if (x >= Width)//если вышли за границы поля
			x -= Width;
		break;
	case DOWN://вниз
		y += 2;
		if (y >= Height)//если вышли за границы поля
			y -= Height;
		break;
	case LEFT://влево
		x -= 2;
		if (x < 0)//если вышли за границы поля
			x += Height;
		break;
	}
}

void Predator::eat()//хищник насыщается
{
	sytost++;
}

bool Predator::reproduction()//размножение хищника при поедании двух жертв
{
	if (sytost == 2)
	{
		cout << "У нас пополнение среди волков!" << endl;
		sytost = 0;
		return true;
	}
	return false;
}

void Predator::death()//если достиг максимального возраста, то умирает
{
	if (age == Predator_max_age)
	{
		cout << "Волк умер от старости. Навсегда в наших серждцах." << endl;
		dead = true;
	}
}

Victim::Victim(int x_i, int y_i, int d_i, int k_i, bool birth_i)//конструктор жертвы
{
	x = x_i;
	y = y_i;
	d = d_i;
	k = k_i;
	age = 0;
	dead = false;
	birth = birth_i;
}

void Victim::move(const int& Width, const int& Height, const int& Turn)//движение жертвы
{
	if ((Turn % k == 0) && (Turn != 0))
		d++;
	if (d == 4)
		d = 0;
	switch (d)
	{
	case UP:
		y--;
		if (y < 0)
			y += Height;
		break;
	case RIGHT:
		x++;
		if (x >= Width)
			x -= Width;
		break;
	case DOWN:
		y++;
		if (y >= Height)
			y -= Height;
		break;
	case LEFT:
		x--;
		if (x < 0)
			x += Width;
		break;
	}
}

void Victim::eat()//съедают жертву
{
	dead = true;
	cout << "Волк съел кролика" << endl;
}

bool Victim::reproduction()//жертва размножается при достижении возраста 5 и 10 лет
{
	if ((age == 5) || (age == 10))
	{
		cout << "Ура! У нас пополнение в семье кроликов!" << endl;
		return true;
	}
	return false;
}

void Victim::death()//смерть при достижении максимального возраста жертвы
{
	if (age == Victim_max_age)
	{
		dead = true;
		cout << "Кролик умер своей мирной старческой смертю" << endl;
	}
}
